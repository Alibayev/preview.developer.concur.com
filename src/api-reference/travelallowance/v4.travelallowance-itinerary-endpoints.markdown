---
title: Travel Allowance v4 - Itinerary
layout: reference
---

{% include prerelease.html %}

## <a name="retrieve-itinerary-resources"></a>Travel Allowance Itineraries(Retrieve)

This endpoint returns the itineraries of a user. This includes header information such as configuration code, overlap type code, trip type code, and the itinerary segments.

### Scopes

`travelallowance.itinerary.read` - Refer to [Scope Usage]((./v4.get-started.html#scope-usage)) for full details.

### URI

```shell
https://{datacenterURI}/travelallowance/v4/users/{userId}/itineraries?context={context}&contextId={contextId}&startDate={startDate}&endDate={endDate}&pageId={pageId}
```

### Parameters

Name|Type|Format |Description                                 
---|---|---|---
 `userId`|`string` | uuid   | **Required** Unique identifier of a traveler(user).
 `context` |`string` | -  |This parameter isn't required. Possible values are `TRAVEL_REQUEST` and `EXPENSE_REPORT`.
 `contextId`|`string` | - |The unique identifier of a travel request or expense report. This parameter isn't required.
 `startDate`|`date` | [ISO 8601] `yyyy-MM-dd` | Start date of the selection interval. This parameter isn't required.
 `endDate`|`date`| [ISO 8601] `yyyy-MM-dd`| End date of the selection interval. This parameter isn't required.
 `pageId`|`string` | - | The ID of a page in case pagination is required to get all results.
 
### Payloads

* Request: None
* Response: [Schema](#schema-collectionmodelofentitymodelofpaginationresultoflistofitinerary)

### Examples
#### Request

```shell
GET https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries?context=EXPENSE_REPORT&contextId=ae6b88fca92245d2a53e&startDate=2023-11-01&endDate=2023-11-10
Accept: application/json
Authorization: Bearer {token}
Concur-CorrelationId: 5f79e774-de18-4478-957f-403c91cb9acc
Accept-Language: en-US
```

#### Response

```shell
200 OK
Content-Type: application/json
```


```json
{
  "content": [
    {
      "header": {
        "configurationCode": "GERMAN_RATE_DOMESTIC",
        "description": "Project at customer",
        "id": 2703,
        "userId": "5e029477-6582-48f3-91e8-bc34c7ed8448",
        "hasNoLodging": false,
        "overlapTypeCode": "TRIP_HOME",
        "tripTypeCode": "CUSTOMER_FACING",
      },
      "segments": [
        {
          "departureDate": "2023-11-01",
          "departureTime": "08:08",
          "departureLocationNameId": "1e90f2ec-e1ba-4e42-a295-2083421f3a40",
          "borderCrossingDate": "2023-11-01",
          "borderCrossingTime": "08:08",
          "arrivalDate": "2023-11-01",
          "arrivalTime": "08:08",
          "arrivalLocationNameId": "0340871b-2d9b-9ef4-b66e-6b044ab0981e",
          "address": {
            "city": "Nuernberg",
            "communityCode": "",
            "countryCode": "DE",
            "postalCode": "83263",
            "street": "Mozartstr. 95"
          },
        },
        {
          "address": {
            "city": "",
            "communityCode": "",
            "countryCode": "",
            "postalCode": "",
            "street": ""
          },
          "departureDate": "2023-11-06",
          "departureTime": "10:00",
          "departureLocationNameId": "0340871b-2d9b-9ef4-b66e-6b044ab0981e",
          "borderCrossingDate": "2023-11-06",
          "borderCrossingTime": "10:00",
          "arrivalDate": "2023-11-06",
          "arrivalTime": "10:00",
          "arrivalLocationNameId": "1e90f2ec-e1ba-4e42-a295-2083421f3a40"
        }
      ],
      "links": [
        {
          "rel": "self",
          "href": "https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703"
        }
      ]
    }
  ],
  "links": [
    {
      "rel": "next",
      "href": "https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries?pageId=9uAvyo9fmtwtl8IeZGCpEyYCCCCCCCCC"
    }
  ]
}
```

## <a name="retrieve-itinerary-resource"></a>Travel Allowance Itinerary(Retrieve)

This endpoint returns a specific itinerary of a user. This includes header information such as configuration code, overlap type code, trip type code, and the itinerary segments. 

### Scopes

`travelallowance.itinerary.read` - Refer to [Scope Usage]((./v4.get-started.html#scope-usage)) for full details.

### URI

```shell
https://{datacenterURI}/travelallowance/v4/users/{userId}/itineraries/{itineraryId}
```

### Parameters

Name|Type|Format |Description                                 
---|---|---|---
`userId` | `string` | uuid   | **Required** Unique identifier of a traveler(user).
`itineraryId`| `integer`| int64  | **Required** Unique identifier of an itinerary.
 
### Payloads

* Request: None
* Response: [Schema](#schema-itinerary)

### Examples
#### Request

```shell
GET https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703
Accept: application/json
Authorization: Bearer {token}
Concur-CorrelationId: 5f79e774-de18-4478-957f-403c91cb9acc
Accept-Language: en-US
```

#### Response

```shell
200 OK
Content-Type: application/json
```


```json
{
  "header": {
    "configurationCode": "GERMAN_RATE_DOMESTIC",
    "description": "Project at customer",
    "id": 2703,
    "userId": "5e029477-6582-48f3-91e8-bc34c7ed8448",
    "hasNoLodging": false,
    "overlapTypeCode": "TRIP_HOME",
    "tripTypeCode": "CUSTOMER_FACING",
  },
  "segments": [
    {
      "departureDate": "2023-11-01",
      "departureTime": "08:08",
      "departureLocationNameId": "1e90f2ec-e1ba-4e42-a295-2083421f3a40",
      "borderCrossingDate": "2023-11-01",
      "borderCrossingTime": "08:08",
      "arrivalDate": "2023-11-01",
      "arrivalTime": "08:08",
      "arrivalLocationNameId": "0340871b-2d9b-9ef4-b66e-6b044ab0981e",
      "address": {
        "city": "Nuernberg",
        "communityCode": "",
        "countryCode": "DE",
        "postalCode": "83263",
        "street": "Mozartstr. 95"
      },
    },
    {
      "address": {
        "city": "",
        "communityCode": "",
        "countryCode": "",
        "postalCode": "",
        "street": ""
      },
      "departureDate": "2023-11-06",
      "departureTime": "10:00",
      "departureLocationNameId": "0340871b-2d9b-9ef4-b66e-6b044ab0981e",
      "borderCrossingDate": "2023-11-06",
      "borderCrossingTime": "10:00",
      "arrivalDate": "2023-11-06",
      "arrivalTime": "10:00",
      "arrivalLocationNameId": "1e90f2ec-e1ba-4e42-a295-2083421f3a40"
    }
  ],,
  "links": [
    {
      "rel": "self",
      "href": "https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703"
    }
  ]
}
```

#### Response Header
```shell
Data:
    Content-Type: application/json
    Etag: "jVuvyo9fmtwtl8IeZGCpEyYAAAAAAAAA"
```

## <a name="retrieve-itinerary-assignment"></a>Travel Allowance Itinerary Assignments(Retrieve)

This endpoint returns the assignments of a specific itinerary of a user. This includes the context of the itinerary and the assignment to a `contextId` per period. Unassigned periods are returned with empty strings as `contextId`.

### Scopes

`travelallowance.itinerary.read` - Refer to [Scope Usage]((./v4.get-started.html#scope-usage)) for full details.

### URI

```shell
https://{datacenterURI}/travelallowance/v4/users/{userId}/itineraries/{itineraryId}/assignments
```

### Parameters

Name|Type|Format |Description                                 
---|---|---|---
`userId`| `string` | uuid | **Required** Unique identifier of a traveler(user).
`itineraryId`| `integer`| int64  | **Required** Unique identifier of an itinerary.
 
### Payloads

* Request: None
* Response: [Schema](#schema-itineraryAssignment)

### Examples
#### Request

```shell
GET https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703/assignments
Accept: application/json
Authorization: Bearer {token}
Concur-CorrelationId: 5f79e774-de18-4478-957f-403c91cb9acc
Accept-Language: en-US
```

#### Response

```shell
200 OK
Content-Type: application/json
```


```json
{
  "context": "EXPENSE_REPORT",
  "itineraryPeriodAssignmentList": [
    {
      "contextId": "42B42F3CFA6D476B88B6",
      "period": {
        "startDate": "2021-11-01",
        "endDate": "2021-11-05"
      }
    },
    {
      "contextId": "",
      "period": {
        "startDate": "2021-11-06",
        "endDate": "2021-11-06"
      }
    }
  ],
  "links": [
    {
      "rel": "self",
      "href": "https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703"
    }
  ]
}
```

#### Response Header
```shell
Data:
    Content-Type: application/json
    Etag: "jVuvyo9fmtwtl8IeZGCpEyYAAAAAAAAA"
```

## <a name="retrieve-itinerary-dayProperty"></a>Travel Allowance Itinerary Day Properties(Retrieve)

This endpoint returns the properties for each day of a specific itinerary of a user. This includes the deductions, lodging, meal type codes, and the location name ids per day.

### Scopes

`travelallowance.itinerary.read` - Refer to [Scope Usage]((./v4.get-started.html#scope-usage)) for full details.

### URI

```shell
https://{datacenterURI}/travelallowance/v4/users/{userId}/itineraryies/{itineraryId}/dayProperties
```

### Parameters

 Name|Type|Format |Description                                 
---|---|---|---
`userId`| `string` | uuid | **Required** Unique identifier of a traveler(user).
`itineraryId`| `integer`| int64  | **Required** Unique identifier of an itinerary.
 
### Payloads

* Request: None
* Response: [Schema](#schema-itinerarydayproperties)

### Examples
#### Request

```shell
GET https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraryies/2703/dayProperties
Accept: application/json
Authorization: Bearer {token}
Concur-CorrelationId: 5f79e774-de18-4478-957f-403c91cb9acc
Accept-Language: en-US
```

#### Response

```shell
200 OK
Content-Type: application/json
```


```json
{
  
  "content": [
    {
      "date": "2021-11-01",
      "deductions": [
        {
          "deductiondeductionCategoryCode": "BREAKFAST",
          "deductionTypeCode": ""
        },
        {
          "deductiondeductionCategoryCode": "LUNCH",
          "deductionTypeCode": ""
        },
        {
          "deductiondeductionCategoryCode": "DINNER",
          "deductionTypeCode": ""
        },
        {
          "deductiondeductionCategoryCode": "LODGING",
          "deductionTypeCode": ""
        }
      ],
        "locationNameIds": [
        "0340871b-2d9b-9ef4-b66e-6b044ab0981e"
      ],
      "lodgingTypeCode": "",
      "mealTypeCode": ""
    },
    {
      "date": "2021-11-02",
      "deductions": [
        {
          "deductionCategoryCode": "BREAKFAST",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LUNCH",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "DINNER",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LODGING",
          "deductionTypeCode": ""
        }
      ],
      "locationNameIds": [
        "0340871b-2d9b-9ef4-b66e-6b044ab0981e"
      ],
      "lodgingTypeCode": "",
      "mealTypeCode": ""
    },
    {
      "date": "2021-11-03",
      "deductions": [
        {
          "deductionCategoryCode": "BREAKFAST",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LUNCH",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "DINNER",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LODGING",
          "deductionTypeCode": ""
        }
      ],
      "locationNameIds": [
        "0340871b-2d9b-9ef4-b66e-6b044ab0981e"
      ],
      "lodgingTypeCode": "",
      "mealTypeCode": ""
    },
    {
      "date": "2021-11-04", 
      "deductions": [
        {
          "deductionCategoryCode": "BREAKFAST",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LUNCH",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "DINNER",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LODGING",
          "deductionTypeCode": ""
        }
      ],
      "locationNameIds": [
        "0340871b-2d9b-9ef4-b66e-6b044ab0981e"
      ],
      "lodgingTypeCode": "",
      "mealTypeCode": ""
    },
    {
      "date": "2021-11-05",
      "deductions": [
        {
          "deductionCategoryCode": "BREAKFAST",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LUNCH",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "DINNER",
          "deductionTypeCode": ""
        },
        {
          "deductionCategoryCode": "LODGING",
          "deductionTypeCode": ""
        }
      ],
      "locationNameIds": [
        "0340871b-2d9b-9ef4-b66e-6b044ab0981e"
      ],
      "lodgingTypeCode": "",
      "mealTypeCode": ""
    }
  ],
  "links": [
    {
      "rel": "self",
      "href": "https://us.api.concursolutions.com/travelallowance/v4/users/5e029477-6582-48f3-91e8-bc34c7ed8448/itineraries/2703"
    }
  ]
}
```

#### Response Header
```shell
Data:
    Content-Type: application/json
    Etag: "jVuvyo9fmtwtl8IeZGCpEyYAAAAAAAAA"
```


## Schemas

## <a name="schema-itinerarycollection"></a>Itinerary Collection

 Name|Type|Format |Description                                 
---|---|---|---
`content` | `array`  | [`Itinerary`](#schema-itinerary)| Array of itinerary details.
`links`| `array`  | [`Link`](#schema-link)| Array of links available for this list of itineraries.

## <a name="schema-itinerary"></a>Itinerary

 Name|Type|Format |Description                                 
---|---|---|---
`header`| `object`  | [`ItineraryHeader`](#schema-itineraryheader)   | General data of the itinerary.        
`segmentList` | `array`| [`ItinerarySegment`](#schema-itinerarysegment) | List of segments of travel constructing the current itinerary. 
`links`| `array`   | [`Link`](#schema-link) | Array of links available for this itinerary.                   

## <a name="schema-itineraryheader"></a>Itinerary Header

 Name|Type|Format |Description                                 
---|---|---|---
`configurationCode` | `string`  | - | The configuration code used to calculate the settlement for the itinerary. 
`description` |`string` | - |Description of the itinerary.                
`hasNoLodging` | `boolean` |`true/ false`| Traveler indicates that the itinerary has no overnight stays, e.g. a truck driver is driving overnight. 
`id`| `integer` | int64 | Identification of the itinerary.                                                                         
`overlapTypeCode` | `string`  | - | Overlap type, can be used to handle different kinds of (overlapping) trips within a trip. 
`tripTypeCode`| `string`| -| Trip type, can be used to apply different calculation rules or allowance rates.         
`userId`| `string` | uuid | Identification of the owner of the itinerary, i.e. the traveler.  

## <a name="schema-itinerarysegment"></a>Itinerary Segment

Name|Type|Format |Description                                 
---|---|---|---
`address`| `object` | [`Address`](#schema-address) | Address of the professional activity at arrival location. Required to apply special calculations (e.g. German 3-month-rule).                                                        
`arrivalDate`| `string` | [ISO 8601] `yyyy-MM-dd`| Date of arrival at the location. 
`arrivalLocationNameId`| `string` | uuid | Id of the arrival location; is either departure location of the next itinerary segment or home/office when itinerary ends with the current segment.       
`arrivalTime`| `string` | `HH:mm`| Time at the arrival location.                                              
`borderCrossingDate`| `string` | [ISO 8601] `yyyy-MM-dd`| Date of border crossing.                              
`borderCrossingTime` | `string` | `HH:mm` | Time of border crossing. 
`departureDate`| `string` | [ISO 8601] `yyyy-MM-dd`| Date of departure from location.  
`departureLocationNameId` | `string` | uuid | Id of the departure location; is either home/office when itinerary begins with the current segment or the arrival location of the last itinerary segment. 
`departureTime`| `string` | `HH:mm` | Time at the departure location.                                   

## <a name="schema-address"></a>Address

Name|Type|Format |Description                                 
---|---|---|---
`city`| `string` | Max length: 100, Min length: 0 | City of location.                            
`communityCode`  | `string` | Max length: 20, Min length: 0  | Community code of location.                  
`countryCode`| `string` | [ISO 3166-1] , length 2        | Country code of location. 
`postalCode`| `string` | Max length: 20, Min length: 0  | Postal code of location.                     
`street` | `string` | Max length: 200, Min length: 0 | Street of location.                          

## <a name="schema-itineraryAssignment"></a>Itinerary Assignment

Name|Type|Format |Description                                 
---|---|---|---
`context` | `enum`  | - | The context of the itinerary. Supported values are: `TRAVEL_REQUEST`, `EXPENSE_REPORT`. 
`itineraryPeriodAssignments` | `array` | [`ItineraryPeriodAssignment`](#schema-itineraryperiodassignment) | List of periods for the current itinerary with their unique assignment to a given context. Unassigned periods are returned with empty strings as `contextId`.
`links`| `array` | [`Link`](#schema-link)| Array of links available for this itinerary assignment.  

## <a name="schema-itineraryperiodassignment"></a>Itinerary Period Assignment

Name|Type|Format |Description                                 
---|---|---|---
`contextId` | `string` | -  | Context id to which current itinerary period is assigned. Empty string if the period is unassigned.                            
`period` | `object` | [`ItineraryPeriod`](#schema-itineraryperiod) | Period of time in which an itinerary is assigned to a `contextId`. 

## <a name="schema-itineraryperiod"></a>Itinerary Period

Name|Type|Format |Description                                 
---|---|---|---
`endDate`   | `string` | [ISO 8601] `yyyy-MM-dd` | End date of the current itinerary period.   
`startDate` | `string` | [ISO 8601] `yyyy-MM-dd` | Start date of the current itinerary period. 

## <a name="schema-itinerarydayproperties"></a>Itinerary Day Properties

Name|Type|Format |Description                                 
---|---|---|---
`content`| `array ` | [`Itinerary Day Property`](#schema-itinerarydayproperty)   | Array of itinerary day property.
`links`| `array`  | [`Link`](#schema-link) | Array of links available for this itinerary day properties.      

 ## <a name="schema-itinerarydayproperty"></a>Itinerary Day Property

Name|Type|Format |Description                                 
---|---|---|---
`date`| `string`| [ISO 8601] `yyyy-MM-dd`  | Date of the day within current itinerary. 
`deductions` | `array`| [`ItineraryDeduction`](#schema-itinerarydeduction) | List of deduction categories relevant on date; each category can appear only once.                      
`locationNameIds` | `array of strings` | - | List of location keys that the users stayed on this day. 
`lodgingTypeCode`| `string` | - | Lodging type; can be used to pay a special lodging rate, e.g. sleeping in a dorm or a youth hostel. 
`mealTypeCode` | `string` | - | Meal type; can be used to pay a special meal rate, e.g. eating in a canteen.   
 
## <a name="schema-itinerarydeduction"></a>Itinerary Deduction

Name|Type|Format |Description                                 
---|---|---|---
`deductionCategoryCode` | `string` | - | Category of deduction; it can be used to distinguish between breakfast, lunch, Lunch & dinner, night, for example.               
`deductionTypeCode` | `string` | - | Type of deduction; it can be used to distinguish between full deduction or partial deduction for the given category, for example. 

## <a name="schema-link"></a>Link

Name|Type|Format |Description                                 
---|---|---|---
`rel`| `string` | [RFC 5988]    | Relation type as defined by the server. There are registered relation types listed in RFC 5988 6.2.2. Initial Registry Contents including pagination relation types of next and self.
`href` | `string` | [RFC 3986]    | The URL of the link. 
